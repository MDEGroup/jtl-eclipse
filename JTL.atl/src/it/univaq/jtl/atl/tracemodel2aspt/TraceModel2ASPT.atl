---------------------------------------------------------------------------------------------------
-- Create a model of ASP traces from a traces model
---------------------------------------------------------------------------------------------------

module TraceModel2ASPT;
create OUT : ASPT from IN : TraceModel;

---------------------------------------------------------------------------------------------------
--                                            HELPERS
---------------------------------------------------------------------------------------------------
helper def: tracemodel : TraceModel!TraceModel = OclUndefined;

helper context String def: normalize() : String = 'x_' + self;

helper context TraceModel!TraceLinkEnd def : getMetamodel() : String =
    self.traceElement.eClass().getEPackage().name.normalize();

helper context TraceModel!TraceLink def : isNode() : Boolean =
    self.leftLinkEnd.first().traceElement
	 .eClass().name = self.leftLinkEnd.first().type;

helper context TraceModel!TraceLink def : isProp() : Boolean =
    self.leftLinkEnd.first().traceElement.eClass().getEAllAttributes()
	 ->select(e | e.name = self.leftLinkEnd.first().type).notEmpty();

helper context TraceModel!TraceLink def : isEdge() : Boolean =
    self.leftLinkEnd.first().traceElement.eClass().getEAllReferences()
	 ->select(e | e.name = self.leftLinkEnd.first().type).notEmpty();

helper context String def : getId() : String = self.split('_').at(2);

helper context String def : getIdTrace() : String =
    self.split('_').at(3).regexReplaceAll('^([^/])','/$0');

helper def : getNodeId(s:TraceModel!EObject) : String = 
	s.__xmiID__.split('-').at(1).getId();

helper def : getNodeIdTrace(s:TraceModel!EObject) : String = 
	if (s.__xmiID__.split('-').at(1).split('_').size()=3) then
		s.__xmiID__.split('-').at(1).getIdTrace() else '/' endif.normalize();

helper context String def : getSerializedString(name:String) : String =
	if (self.indexOf(name + '_') <> -1) then
		self.split('-')->select(s | s.contains(name + '_')).first()
	else '' endif;

helper context String def : getSerializedStringById(id:String) : String =
	if (self.indexOf('_' + id + '_') <> -1) then
		self.split('-')->select(s | s.contains('_' + id + '_')).first()
	else '' endif;

helper def : getFeatureId(s:TraceModel!EObject, name:String) : String =
	s.__xmiID__.getSerializedString(name).getId();

helper def : getFeatureIdTrace(s:TraceModel!EObject, name:String) : String =
	s.__xmiID__.getSerializedString(name).getIdTrace();

helper def : getFeatureIdTraceById(s:TraceModel!EObject, id:String) : String =
	s.__xmiID__.getSerializedStringById(id).getIdTrace().normalize();

helper def : getFeatureIdTargetById(s:TraceModel!EObject, id:String) : String =
	s.__xmiID__.getSerializedStringById(id).split('_').at(1).split('t').last();

helper def : getFeatureIdTraceTargetById(id:String) : String =
    thisModule.getNodeIdTrace(
    	TraceModel!TraceLink.allInstancesFrom('IN')->collect(e|e.leftLinkEnd)->flatten()
    		->collect(e|e.traceElement)
    		->select(e|thisModule.getNodeId(e) = id).first());

---------------------------------------------------------------------------------------------------
--                                          CALLED RULES
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
--                                           LAZY RULES
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
--                                         MATCHED RULES
---------------------------------------------------------------------------------------------------
rule TraceModel2TraceModel {
	from
		s : TraceModel!TraceModel
	to
		t : ASPT!TraceModel (
			ID <- s.name,
			MMS <- TraceModel!TraceLink.allInstancesFrom('IN')
					.first().leftLinkEnd.first().getMetamodel()
		)
	do { thisModule.tracemodel <- t; }
}

rule TraceLink2TraceLink {
	from
		s : TraceModel!TraceLink (not s.isPartial and not s.isNonInjective)
    using {
		leftlink : TraceModel!TraceLinkEnd = s.leftLinkEnd->first();
		rightlink : TraceModel!TraceLinkEnd = s.rightLinkEnd->first(); }
	to
		left : ASPT!TraceLink (
		    id <- s.id,
		    idx <- thisModule.getFeatureIdTraceById(leftlink.traceElement, s.id),
		    idref <- thisModule.getNodeId(leftlink.traceElement),
		    idrefx <- thisModule.getNodeIdTrace(leftlink.traceElement),
		    metamodel <- leftlink.getMetamodel(),
		    relation <- s.trule,
		    type <- leftlink.type.normalize()
		),
		right : ASPT!TraceLink (
		    id <- s.id,
		    idx <- thisModule.getFeatureIdTraceById(rightlink.traceElement, s.id),
		    idref <- thisModule.getNodeId(rightlink.traceElement),
		    idrefx <- thisModule.getNodeIdTrace(rightlink.traceElement),
		    metamodel <- rightlink.getMetamodel(),
		    relation <- s.trule,
		    type <- rightlink.type.normalize()
		)
	do { thisModule.tracemodel.tracelinks <- Sequence{left, right}; }
}

rule TraceLink2TraceNode {
	from
		s : TraceModel!TraceLink (s.isPartial and s.isNode())
    using { linkend : TraceModel!TraceLinkEnd = s.leftLinkEnd->first(); }
	to
		t : ASPT!TraceNode (
		    metamodel <- linkend.getMetamodel(),
		    id <- s.id,
		    idx <- thisModule.getNodeIdTrace(linkend.traceElement),
		    type <- linkend.type.normalize()
		)
	do { thisModule.tracemodel.tracelinks <- t; }
}

rule TraceLink2TraceProp {
	from
		s : TraceModel!TraceLink (s.isPartial and s.isProp())
    using { linkend : TraceModel!TraceLinkEnd = s.leftLinkEnd->first(); }
	to
		t : ASPT!TraceProp (
		    metamodel <- linkend.getMetamodel(),
		    id <- s.id,
		    idx <- thisModule.getFeatureIdTraceById(linkend.traceElement, s.id),
		    idp <- thisModule.getNodeId(linkend.traceElement),
		    idpx <- thisModule.getNodeIdTrace(linkend.traceElement),
		    type <- linkend.type.normalize(),
		    value <- linkend.traceElement.eGet(
		        linkend.traceElement.eClass().getEStructuralFeature(linkend.type))
		        .normalize()
		)
	do { thisModule.tracemodel.tracelinks <- t; }
}

rule TraceLink2TraceEdge {
	from
		s : TraceModel!TraceLink (s.isPartial and s.isEdge())
    using { linkend : TraceModel!TraceLinkEnd = s.leftLinkEnd->first(); }
	to
		t : ASPT!TraceEdge (
		    metamodel <- linkend.getMetamodel(),
		    id <- s.id,
		    idx <- thisModule.getFeatureIdTraceById(linkend.traceElement, s.id),
		    ids <- thisModule.getNodeId(linkend.traceElement),
		    idsx <- thisModule.getNodeIdTrace(linkend.traceElement),
		    idt <- thisModule.getFeatureIdTargetById(linkend.traceElement, s.id),
		    idtx <- thisModule.getFeatureIdTraceTargetById(
		        thisModule.getFeatureIdTargetById(linkend.traceElement, s.id)),
		    type <- linkend.type.normalize()
		)
	do { thisModule.tracemodel.tracelinks <- t; }
}

rule TraceLink2TraceNbNode {
	from
		s : TraceModel!TraceLink (s.isNonInjective and s.isNode())
    using { linkend : TraceModel!TraceLinkEnd = s.leftLinkEnd->first(); }
	to
		t : ASPT!TraceNbNode (
		    metamodel <- linkend.getMetamodel(),
		    id <- s.id,
		    idx <- thisModule.getNodeIdTrace(linkend.traceElement),
		    type <- linkend.type.normalize()
		)
	do { thisModule.tracemodel.tracelinks <- t; }
}

rule TraceLink2TraceNbProp {
	from
		s : TraceModel!TraceLink (s.isNonInjective and s.isProp())
    using { linkend : TraceModel!TraceLinkEnd = s.leftLinkEnd->first(); }
	to
		t : ASPT!TraceNbProp (
		    metamodel <- linkend.getMetamodel(),
		    id <- s.id,
		    idx <- thisModule.getFeatureIdTraceById(linkend.traceElement, s.id),
		    idp <- thisModule.getNodeId(linkend.traceElement),
		    idpx <- thisModule.getNodeIdTrace(linkend.traceElement),
		    type <- linkend.type.normalize(),
		    value <- linkend.traceElement.eGet(
		        linkend.traceElement.eClass().getEStructuralFeature(linkend.type))
		        .normalize()
		)
	do { thisModule.tracemodel.tracelinks <- t; }
}

rule TraceLink2TraceNbEdge {
	from
		s : TraceModel!TraceLink (s.isNonInjective and s.isEdge())
    using { linkend : TraceModel!TraceLinkEnd = s.leftLinkEnd->first(); }
	to
		t : ASPT!TraceNbEdge (
		    metamodel <- linkend.getMetamodel(),
		    id <- s.id,
		    idx <- thisModule.getFeatureIdTraceById(linkend.traceElement, s.id),
		    ids <- thisModule.getNodeId(linkend.traceElement),
		    idsx <- thisModule.getNodeIdTrace(linkend.traceElement),
		    idt <- thisModule.getFeatureIdTargetById(linkend.traceElement, s.id),
		    idtx <- thisModule.getFeatureIdTraceTargetById(
		        thisModule.getFeatureIdTargetById(linkend.traceElement, s.id)),
		    type <- linkend.type.normalize()
		)
	do { thisModule.tracemodel.tracelinks <- t; }
}